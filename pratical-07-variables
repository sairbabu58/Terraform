
...
$ vi variables.tf

variable "vpn_ip" {
  default = "116.50.30.50/32"
}

...
$ vi main.tf

provider "aws" {
  region = "us-east-1"
}

resource "aws_security_group" "var_demo" {
  name        = "j2c technologies"

  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = [var.vpn_ip]
  }

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = [var.vpn_ip]
  }

  ingress {
    from_port   = 53
    to_port     = 53
    protocol    = "tcp"
    cidr_blocks = [var.vpn_ip]
  }
}

$ terraform apply -auto-approve
$ terraform destroy -auto-approve




#################################################



# Advance variable declaration 

$ main.tf

provider "aws" {
  region     = "us-west-2"
}

resource "aws_instance" "myec2" {
   ami = "ami-082b5a644766e0e6f"
   instance_type = var.instancetype
}

...
#variable defaults

$ vi variables.tf
variable "instancetype" {
  default = "t2.micro"
}

...






#command line variables.
# you can over write the vars value using -var=some-thing command

$ terraform apply -var="instancetype=t2.small"







#if not define any default value

$ vi variables.tf
variable "instancetype" {
}

$ terraform apply 
Enter the instancetype: t2.micro (it will ask the valu during the execution)






#create your env specific vars file and use that for building resources.
#like instance type, SG, VPC, subnet EIP and so on.
#Note extention name is .tfvars

$ vi prod.tfvars
$ vi dev.tfvars
variable "instancetype" {
  default = "t2.micro" # (or t2.large ..etc)
}

$ terraform apply -var-file="prod.tfvars"
$ terraform apply -var-file="dev.tfvars"



####################################################################


#Variables type and structure 


$ vi main.tf

provider "aws" {
  region     = "us-west-2"
  access_key = "YOUR-ACCESS-KEY"
  secret_key = "YOUR-SECRET-KEY"
}

resource "aws_elb" "bar" {
  name               = var.elb_name
  availability_zones = var.az

  listener {
    instance_port     = 8000
    instance_protocol = "http"
    lb_port           = 80
    lb_protocol       = "http"
  }

  health_check {
    healthy_threshold   = 2
    unhealthy_threshold = 2
    timeout             = 3
    target              = "HTTP:8000/"
    interval            = 30
  }

  cross_zone_load_balancing   = true
  idle_timeout                = var.timeout
  connection_draining         = true
  connection_draining_timeout = var.timeout

  tags = {
    Name = "foobar-terraform-elb"
  }
}




$ vi vars.tf

variable "elb_name" {
  type = string
}

variable "az" {
  type = list
}

variable "timeout" {
  type = number
}



$ vi terraform.tfvars

elb_name="myelb"
timeout="400"
az=["us-west-1a","us-west-1b"]






##############################################################


$ vi main.tf


resource "aws_instance" "myec2" {
   ami = "ami-082b5a644766e0e6f"
   instance_type = var.list[0]        #0=m5large, 1=m5.xlarge, 2=t2.medium
}

variable "list" {
  type = list
  default = ["m5.large","m5.xlarge","t2.medium"]
}

....

$ vi main.tf


resource "aws_instance" "myec2" {
   ami = "ami-082b5a644766e0e6f"
   instance_type = var.type["large"]
}

variable "type" {
  type = map
  default = {
    small = "t2.small"
    large = "t2.large"
    xlarge = "m2.large"
  }
}







