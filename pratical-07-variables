
...
$ vi variables.tf

variable "vpn_ip" {
  default = "116.50.30.50/32"
}

...
$ vi main.tf

provider "aws" {
  region = "us-east-1"
}

resource "aws_security_group" "var_demo" {
  name        = "j2c technologies"

  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = [var.vpn_ip]
  }

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = [var.vpn_ip]
  }

  ingress {
    from_port   = 53
    to_port     = 53
    protocol    = "tcp"
    cidr_blocks = [var.vpn_ip]
  }
}

$ terraform apply -auto-approve
$ terraform destroy -auto-approve








# Advance variable declaration 

$ main.tf

provider "aws" {
  region     = "us-west-2"
}

resource "aws_instance" "myec2" {
   ami = "ami-082b5a644766e0e6f"
   instance_type = var.instancetype
}

...
#variable defaults

$ vi variables.tf
variable "instancetype" {
  default = "t2.micro"
}

...






#command line variables.
# you can over write the vars value using -var=some-thing command

$ terraform apply -var="instancetype=t2.small"







#if not define any default value

$ vi variables.tf
variable "instancetype" {
}

$ terraform apply 
Enter the instancetype: t2.micro (it will ask the valu during the execution)






#create your env specific vars file and use that for building resources.
#like instance type, SG, VPC, subnet EIP and so on.
#Note extention name is .tfvars

$ vi prod.tfvars
$ vi dev.tfvars
variable "instancetype" {
  default = "t2.micro" # (or t2.large ..etc)
}

$ terraform apply -var-file="prod.tfvars"
$ terraform apply -var-file="dev.tfvars"




