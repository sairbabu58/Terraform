#We can configure backend for terraform.
#terraform code will available based on backend configuration location


Backend Types:
  1) Local Backend Configuration
  2) S3 Backend Configuration
  3) Remote Backend Configuration (terraform console) 
  4) Http Backend Configuration

https://developer.hashicorp.com/terraform/language/settings/backends/local
https://developer.hashicorp.com/terraform/language/settings/backends/s3
https://developer.hashicorp.com/terraform/language/settings/backends/http

https://www.terraform.io/
[Docs -> Search -> backend configuration]





Remote Backend configuration:
------------------------------

  1) Creata an account on terraform console https://www.terraform.io/  (try Terraform Cloud)
  2) Creata an organization (j2ctechnologies)
  3) Create a workspace (dev-env)
  3) From your machine execute $ terraform login command
  4) 'YES' Generate a new token and use it to login terraform console.
  
  5) add the backend configuration code to your terraform.tf file (you can get this file from your terraform webconsole under organization->workspace)
  terraform {
  cloud {
    organization = "j2ctechnologies"

    workspaces {
      name = "dev-env"
    }
  }
}

  6) $ terraform init ($ terrafprm init --reconfigure)
  7) $ terraform apply


Issues Details:
 1) If $ terraform apply is not woking, please delete the local 'terraform.tfstate and terraform.tfstate.backup files from your correct local directory'
 2) If you are planning to deploy any resources on aws/azure cloud env and you have already export key/cert on localy, it does not work. you have to provide those credential detals over terraform console.
        -> organization -> workspace -> choose your workspace -> variable -> add veriable -> Choose 'Environment variable'
                                                                                                              key: AWS_ACCESS_KEY_ID      value: 873872egdbsajdbabd
                                                                                                              key: AWS_SECRET_ACCESS_KEY  value: dwfsjnfs673t76e72





==============================================================================================================


#Migrate the code from remote backend to local backend.

  1) Configured the file for remote backend configuration.(follow the above steps)
  2) Migrate remote backend to local backend 
  3 $ vi terraform.tf
  4) Remove the remote backend block. (Note: terraform default backend is local backend. so no need to configure additional perameter)
  5) $ terraform validate
  6) $ terraform init -migrate-state
  7) $ terraform state list
      

                                                                                      

#Migrate the code from local backend to s3 backend.

  1) Now your codes are available on local backend storage
  2) Configure the terraform.tf file and update the below code to migrate S3 backend (Note: please configure the S3 bucket, get the S3 bucket details and export the secret key and acess token)
  3) Edit the configuration and update the S3 backend details.
      $ vi terraform.tf

  terraform {
    backend "s3" {
      bucket = "my-terraform-state-ghm"
      key = "prod/aws_infra"
      region = "us-east-1"
      dynamodb_table = "terraform-locks"
      encrypt = true
    }
}

$ terraform validate
$ terraform init -migrate-state
      - yes
$ terraform state list
$ login to S3 bucket and validate the code



#Migrate the code from s3 backend to remote backend.

  1) Now your codes are available on S3 backend storage
  2) Configure the terraform.tf file and update the below code to migrate remote backend (Note: Please login and configure the terraform console for remote backend)
  3) Edit the configuration and update the S3 backend details.
      $ vi terraform.tf
terraform {
    backend "remote" {
    hostname = "app.terraform.io"
    organization = "Enterprise-Cloud"
    workspaces {
    name = "my-aws-app"
    }
  }
}

$ terraform validate
$ terraform init -migration-state
$ terraform state list







#Example file

$ terraform.tf file


terraform {
  required_version = ">= 1.0.0"
  required_providers {
    aws = {
      source = "hashicorp/aws"
      version = "~> 3.0"
}
    http = {
      source = "hashicorp/http"
      version = "2.1.0"
}
    random = {
      source = "hashicorp/random"
      version = "3.1.0"
}
    local = {
      source = "hashicorp/local"
      version = "2.1.0"
}
    tls = {
      source = "hashicorp/tls"
      version = "3.1.0"
    }
    }
  }
